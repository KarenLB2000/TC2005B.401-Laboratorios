<%- include('includes/head.ejs') %>

    <div class="divider"></div>
    <h4>Archivo package.json.</h4>
    <p>El archivo package.json es un archivo de definición o manifiesto para nuestro proyecto, en el cual especificamos
        referencias al proyecto como: autor, repositorio, versión y sobre todo las dependencias, entre otras cosas
        (Anexsoft, 2022).
        Dicho archivo resulta útil para manejar y definir las características del proyecto así como para optimizar la
        forma en que se generan las dependencias del proyecto y los contenidos de la carpeta node_modules/ (Manz.dev,
        s.f.).
    </p>
    
    <div class="divider"></div>
    <h4>Template Engines.</h4>
    <p>Algunos motores de templates para Node.js, inclyen a (Openbase, 2022): Handlebars, Eta, Ejs, Marko, Mustache, Jade, Pug.
    </p>
    
    <div class="divider"></div>
    <h4>Estilo MVC.</h4>
    <p>El estilo MVC, como bien hemos aprendido es un estilo de arquitectura de software que separa los datos de una aplicación,
        la interfaz de usuario y la lógica de control en tres componentes: modelos, vistas y controladores. Así pues, respecto a las
        ventajas, tenemos que éste (Bibliotecas UDLAP, s.f.): 
    </p>
    <ul>
        <li>&emsp;Crea independica de funcionamiento.</li>
        <li>&emsp;Facilita el mantenimiento en caso de errores.</li>
        <li>&emsp;Permite el escalamiento de la aplicación.</li>
    </ul>
    
    <p>Por el otro lado, hablando de sus desventajas:</p>
    <ul>
        <li>&emsp;La separación de conceptos en capas agrega complejidad al sistema.</li>
        <li>&emsp;La cantidad de archivo a mantener y desarrollar aumente considerablemente.</li>
        <li>&emsp;La curva de aprendizaje del patrón de diseño es más alta que usando otros modelos más sencillos.</li>
    </ul>

    <div class="divider"></div>
    <h4>SQL.</h4>
    <p>
        La capa del modelo se encarga de acceder, almacenar y recuperar toda la información de sincronización del sistema. 
        Es en esta capa donde se implementa las conexiones al servidor y la base de datos propiamente dicha, se invoca a los 
        procedimientos almacenados los cuales reciben solicitudes de almacenamiento o recuperación de información.

        Ahora bien, respecto a las ventajas que tiene escribir el código SQL únicamente en la capa del modelo, una de ellas es que ésta faculta 
        a la clara división de tareas entre capas, <i>facilitando</i> al desarrollador saber, por ejemplo, en qué parte del proyecto 
        se está dando la interacción con la base de datos.
    </p>

    <p>
        Por otro lado, de acuerdo con Campos (2017), SQL injection (Inyección SQL) es "una vulnerabilidad que permite al atacante enviar instrucciones SQL 
        de forma maliciosa y malintencionada dentro del código SQL programado para la manipulación de bases de datos". Un método para prevenir este ataque es
        el de las declaraciones preparadas (con consultas parametrizadas) o bien, el uso de procedimientos (<i>stored procedures</i>).
    </p>

    <div class="divider"></div>
    <h4>Autentificación.</h4>
    <p>
       Sobre los métodos de autentificación, Evidian (s.f.) menciona que los métodos más utilizados son:
    </p>

    <ul>
        <li>1. Identificador y contraseña.</li>
        <li>2. Identificador y OTP.</li>
        <li>3. Token USB o tarjeta inteligente PKI.</li>
        <li>4. Llave "Confidencial Defensa".</li>
        <li>5. Tarjeta inteligente con identificador y contraseña.</li>
        <li>6. Biometría.</li>
        <li>7. RFID Activo.</li>
    </ul>

    <div class="divider"></div>
    <h4>Servicios Web.</h4>
    <p>
       Sobre las ventajas y desventajas que tiene la integración de aplicaciones web con servicios web desarrollados por terceros:
    </p>

    <ul>
        <li><strong><i>Ventajas (Silva, 2021):</i></strong></li>
        <li>1. Automatización.</li>
        <li>2. Eficiencia de los sitemas y aplicaciones.</li>
        <li>3. Menor volumen de datos y personalización.</li>
    </ul>

    <ul>
        <li><strong><i>Desventajas (JOHNBO, 2011):</i></strong></li>
        <li>1. Condiciones cambiantes. </li>
        <li>2. Disponibilidad.</li>
        <li>3. Falta de innovación. </li>
    </ul>


    <div class="divider"></div>
    <h4>Referencias</h4>
    <p style="text-align: left;">
        Anexsoft. (2022). ¿Qué es el package.json y cómo funciona? Recuperado de: <a
            href="https://anexsoft.com/que-es-el-packagejson-y-como-funciona">https://anexsoft.com/que-es-el-packagejson-y-como-funciona</a><br><br>

        Bibliotecas UDLAP. (s.f.). Arquitectura de Software. Recuperado de: <a
            href="http://catarina.udlap.mx/u_dl_a/tales/documentos/lis/rivera_l_a/capitulo2.pdf">http://catarina.udlap.mx/u_dl_a/tales/documentos/lis/rivera_l_a/capitulo2.pdf</a><br><br>

        Campos, P. (2017). ¿Qué es SQL Injection? Recuperado de: <a
            href="https://openwebinars.net/blog/que-es-sql-injection/">https://openwebinars.net/blog/que-es-sql-injection/</a><br><br>

        Evidian. (s.f.). Los 7 métodos de Autentificación más utilizados. Recuperado de: <a
            href="https://www.evidian.com/pdf/wp-strongauth-es.pdf">https://www.evidian.com/pdf/wp-strongauth-es.pdf</a><br><br>
            
        JOHNBO. (2011). Pros y contras del uso de APIs de terceros. Recuperado de: <a
            href="https://www.genbeta.com/desarrollo/pros-y-contras-del-uso-de-apis-de-terceros">https://www.genbeta.com/desarrollo/pros-y-contras-del-uso-de-apis-de-terceros</a><br><br>

        Manz.dev. (s.f.). El archivo package.json. Recuperado de: <a
            href="https://lenguajejs.com/npm/administracion/package-json/#el-archivo-package-lockjson">https://lenguajejs.com/npm/administracion/package-json/#el-archivo-package-lockjson</a><br><br>

        Moquillaza, S. (2010). Programación en N capas. Recuperado de: <a
            href="https://sisbib.unmsm.edu.pe/BIBvIRTUAL/Publicaciones/risi/2010_n2/v7n2/a07v7n2.pdf">https://sisbib.unmsm.edu.pe/BIBvIRTUAL/Publicaciones/risi/2010_n2/v7n2/a07v7n2.pdf</a><br><br>
    
        OpenBase. (2022). 10 Best Node.js HTML Templating Engine Libraries. Recuperado de: <a
            href="https://openbase.com/categories/js/best-nodejs-html-templating-engine-libraries">https://openbase.com/categories/js/best-nodejs-html-templating-engine-libraries</a><br><br>
        
        Silva, D. (2021). ¿Qué es una API? Ventajas y usos. Recuperado de: <a
            href="https://www.zendesk.com.mx/blog/que-es-api/">https://www.zendesk.com.mx/blog/que-es-api/</a>
    </p><br>
    <a href="/sevenseas">Regresar a Inicio.</a><br><br>

    <%- include('includes/foot.ejs') %>